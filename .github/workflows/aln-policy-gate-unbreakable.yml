needs: opa-policy-check
if: needs.opa-policy-check.outputs.policy_passed == 'true'


name: üöÄ ALN Programming Language - Governed CI/CD

on:
  push:
    branches: [ main, develop ]
    paths-ignore:
      - '**.md'
      - 'docs/**'
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      deploy_env:
        description: 'Deployment Environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - staging
          - production

# Prevent overlapping runs
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  NODE_VERSION: '18.x'
  PYTHON_VERSION: '3.11'
  ALN_VERSION: '12.0.0'
  DOCKER_BUILDKIT: 1

jobs:
  # Pre-flight governance gate (fail-open for known tool glitches; hard-fail on real violations)
  opa-policy-check:
    name: üõ°Ô∏è OPA Workflow Policy Gate
    runs-on: ubuntu-latest
    outputs:
      policy_passed: ${{ steps.evaluate.outputs.policy_passed }}
    steps:
      - name: üì• Checkout repository
        uses: actions/checkout@v4

      - name: üì¶ Install OPA CLI & yq
        run: |
          curl -L -o opa https://openpolicyagent.org/downloads/latest/opa_linux_amd64
          chmod +x opa
          sudo mv opa /usr/local/bin/
          sudo apt-get update && sudo apt-get install -y yq jq

      - name: üîÑ Convert workflow YAML to JSON
        run: |
          mkdir -p policy-input
          for wf in .github/workflows/*.yml; do
            yq -o=json "$wf" > "policy-input/$(basename "$wf" .yml).json"
          done

      - name: üß† Evaluate workflows against policy (Fail-Open Safe Mode)
        id: evaluate
        run: |
          set -e
          violations=0
          tool_error=0

          for json in policy-input/*.json; do
            echo "üîç Checking $(basename "$json" .json)"
            if ! result=$(opa eval --format=json --input "$json" --data workflow.rego "data.workflows.deny" 2>opa_error.log); then
              echo "‚ö†Ô∏è OPA evaluation error on $(basename "$json"):"
              cat opa_error.log
              if grep -qi "packages_failbot_failbot_ts" opa_error.log; then
                echo "‚ö†Ô∏è Detected known failbot error ‚Äî marking as tool error, not policy violation."
                tool_error=1
                continue
              else
                echo "‚ùå Unexpected OPA error ‚Äî treating as violation."
                violations=1
                continue
              fi
            fi

            echo "$result" | jq
            if [ "$(echo "$result" | jq '.result[0].expressions[0].value | length')" -gt 0 ]; then
              violations=1
            fi
          done

          if [ $violations -ne 0 ]; then
            echo "policy_passed=false" >> $GITHUB_OUTPUT
            exit 1
          elif [ $tool_error -ne 0 ]; then
            echo "‚ö†Ô∏è Policy check tool error detected ‚Äî FAIL-OPEN for Bit.Bots"
            echo "policy_passed=true" >> $GITHUB_OUTPUT
          else
            echo "policy_passed=true" >> $GITHUB_OUTPUT
          fi

  # Job 1: Validation
  validate:
    name: üîç Validate & Setup
    runs-on: ubuntu-latest
    needs: [opa-policy-check]
    if: needs.opa-policy-check.outputs.policy_passed == 'true'
    outputs:
      should-deploy: ${{ steps.check.outputs.deploy }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: üè∑Ô∏è Extract version
        id: version
        shell: bash
        run: |
          VERSION=$(grep -oP 'version.*"\K[^"]+' README.md | head -1 || echo "12.0.0")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "üì¶ Version: $VERSION"

      - name: üîç Check deployment requirement
        id: check
        shell: bash
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]] || [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            echo "deploy=true" >> $GITHUB_OUTPUT
          else
            echo "deploy=false" >> $GITHUB_OUTPUT
          fi

      - name: üìã File structure validation
        shell: bash
        run: |
          LAST_AUTHOR="$(git log -1 --pretty=format:'%an')"
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] \
             || [[ "$LAST_AUTHOR" == "ALN File Corrector" ]] \
             || [[ "${{ github.actor }}" == "github-actions[bot]" ]]; then
            echo "Skipping README.md check for automation/manual trigger."
          else
            [[ -f "README.md" ]] || (echo "‚ùå Missing README.md" && exit 1)
            echo "‚úÖ Structure OK"
          fi

  # Job 2: Matrix .NET build/test
  build-dotnet:
    name: üèóÔ∏è Build & Test (.NET ${{ matrix.dotnet }} on ${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    needs: [opa-policy-check, validate]
    if: needs.opa-policy-check.outputs.policy_passed == 'true'
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        dotnet: ['6.0.x', '8.0.x']
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ matrix.dotnet }}

      - name: üì¶ Restore
        shell: bash
        run: |
          PROJECT=$(find src/Core -maxdepth 2 -name "*.csproj" -o -name "*.sln" | head -n 1 || true)
          if [[ -n "$PROJECT" ]]; then dotnet restore "$PROJECT"; else echo "‚ÑπÔ∏è No .NET project found"; fi

      - name: üèóÔ∏è Build
        shell: bash
        run: |
          PROJECT=$(find src/Core -maxdepth 2 -name "*.csproj" -o -name "*.sln" | head -n 1 || true)
          if [[ -n "$PROJECT" ]]; then dotnet build "$PROJECT" -c Release --no-restore; else echo "‚ÑπÔ∏è Skipping build"; fi

      - name: üß™ Test
        shell: bash
        run: |
          if find tests -name "*.csproj" | grep -q .; then
            dotnet test tests -c Release --no-build --logger trx
          else
            echo "‚ÑπÔ∏è No .NET test projects found"
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: dotnet-${{ matrix.os }}-${{ matrix.dotnet }}
          path: |
            src/Core/bin/Release/
            artifacts/
          if-no-files-found: warn
          retention-days: 7

  # Job 3: PowerShell validation
  validate-powershell:
    name: üîß PowerShell Validation
    runs-on: windows-latest
    needs: [opa-policy-check, validate]
    if: needs.opa-policy-check.outputs.policy_passed == 'true'
    steps:
      - uses: actions/checkout@v4

      - name: üîç Validate PowerShell Scripts/Modules
        shell: pwsh
        run: |
          $files = Get-ChildItem -Recurse -Include *.ps1,*.psm1 -File
          if ($files.Count -eq 0) {
            Write-Host "‚ÑπÔ∏è No PowerShell scripts or modules found."
            exit 0
          }
          $failures = 0
          foreach ($file in $files) {
            Write-Host "üîé Checking: $($file.FullName)"
            try {
              $null = Get-Content $file.FullName -ErrorAction Stop
              Write-Host "‚úÖ $($file.Name) validated"
            } catch {
              Write-Host "‚ùå $($file.Name) failed: $($_.Exception.Message)"
              $failures++
            }
          }
          if ($failures -gt 0) {
            Write-Host "‚ùå Some PowerShell files failed validation."
            exit 1
          } else {
            Write-Host "‚úÖ All PowerShell files passed validation."
          }

  # Job 4: Docker
  build-docker:
    name: üê≥ Docker Build
    runs-on: ubuntu-latest
    needs: [opa-policy-check, validate, build-dotnet]
    if: needs.opa-policy-check.outputs.policy_passed == 'true'
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3
      - shell: bash
        run: |
          IMAGE="aln-core:${{ needs.validate.outputs.version }}"
          docker build -t $IMAGE .
          docker run --rm $IMAGE

  # Job 5: Security
  security-scan:
    name: üîí Security Scan
    runs-on: ubuntu-latest
    needs: [opa-policy-check, validate]
    if: needs.opa-policy-check.outputs.policy_passed == 'true'
    steps:
      - uses: actions/checkout@v4
      - run: echo "‚úÖ Security check placeholder"

  # Job 6: Deploy
  deploy:
    name: üöÄ Deploy
    runs-on: ubuntu-latest
    needs:
      - opa-policy-check
      - validate
      - build-dotnet
      - validate-powershell
      - build-docker
      - security-scan
    if: >
      needs.opa-policy-check.outputs.policy_passed == 'true' &&
      always() &&
      needs.validate.outputs.should-deploy == 'true' &&
      needs.build-dotnet.result == 'success' &&
      needs.build-docker.result == 'success'
    environment:
      name: ${{ github.event.inputs.deploy_env || 'staging' }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - shell: bash
        run: |
          echo "üöÄ Deploying ALN v${{ needs.validate.outputs.version }} to ${{ github.event.inputs.deploy_env || 'staging' }}"

  # Job 7: ALN File Correction
  correct-files:
    name: üõ†Ô∏è ALN File Correction
    runs-on: ${{ matrix.os }}
    needs: [opa-policy-check, validate]
    if: needs.opa-policy-check.outputs.policy_passed == 'true'
    strategy:
      matrix:
        os: [windows-latest, ubuntu-24.04]
    concurrency:
      group: correct-files-${{ github.ref_name }}
      cancel-in-progress: false
    steps:
      - name: Checkout repo (full history)
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install PowerShell on Linux
        if: runner.os == 'Linux'
        uses: PSModule/install-powershell@v1
        with:
          Version: 'latest'

      - name: Run ALN file correction script
        shell: pwsh
        run: ./scripts/correct-aln-files.ps1

      - name: Show Git status & diff summary
        shell: bash
        run: |
          echo "===== GIT STATUS ====="
          git status
          echo
          echo "===== DIFF SUMMARY ====="
          git diff --stat || true
          echo
          echo "===== FULL DIFF SNIPPETS ====="
          git diff || true

      - name: Commit & safe push corrections (with auto-retry)
        shell: bash
        run: |
          set -e

          git config user.name "ALN File Corrector"
          git config user.email "actions@github.com"

          git add .

          if git diff --cached --quiet; then
            echo "No changes to commit."
            exit 0
          fi

          git commit -m "Automated ALN file correction"

          attempt_push() {
            git pull --rebase origin "${GITHUB_REF_NAME}" || return 1
            if [ "$(git rev-list HEAD ^origin/${GITHUB_REF_NAME} --count)" -gt 0 ]; then
              git push origin "${GITHUB_REF_NAME}" || return 1
              echo "Push successful."
            else
              echo "No new commits to push after rebase."
            fi
          }

          for i in 1 2 3; do
            if attempt_push; then
              exit 0
            fi
            echo "Push failed (attempt $i). Retrying in $((i*5))s..."
            sleep $((i*5))
          done

          echo "Push failed after 3 attempts."
          exit 1
