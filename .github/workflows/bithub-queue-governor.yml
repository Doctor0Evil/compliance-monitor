name: Bit.Hub Queue Governor

on:
  schedule:
    - cron: "*/10 * * * *"
  workflow_dispatch: {}

permissions:
  contents: read

concurrency:
  group: bithub-queue-governor-${{ github.ref }}
  cancel-in-progress: false

env:
  REPORT_DIR: ".bithub/reports"

jobs:
  govern:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4
      - run: sudo apt-get update -y && sudo apt-get install -y gh jq
      - name: Inspect workflow queue
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p "${REPORT_DIR}"
          gh run list --limit 200 --json databaseId,name,status,workflowName,createdAt \
            | jq -c '.[]' > "${REPORT_DIR}/runs.jsonl" || true
          inflight=$(jq -s '[.[]|select(.status!="completed")]|length' "${REPORT_DIR}/runs.jsonl")
          echo "Inflight: $inflight"
      - name: Cancel duplicate pending (best-effort)
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Keep the newest per workflowName; cancel older queued ones.
          jq -s '
            group_by(.workflowName) |
            map(sort_by(.createdAt) | del(.[-1])) | flatten | .[]
          ' "${REPORT_DIR}/runs.jsonl" \
          | while read -r run; do
              id=$(jq -r '.databaseId' <<<"$run")
              status=$(jq -r '.status' <<<"$run")
              if [ "$status" != "completed" ]; then
                echo "Cancelling duplicate run $id"
                gh run cancel "$id" || true
              fi
            done
      - name: Always succeed
        run: echo "Queue governor completed."

            - name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v3.4.2
  with:
    # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # optional
    # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
    dotnet-quality: # optional
    # Optional global.json location, if your global.json isn't located in the root of the repo.
    global-json-file: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Optional input to enable caching of the NuGet global-packages folder
    cache: # optional
    # Used to specify the path to a dependency file: packages.lock.json. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
          
