name: Bit.Hub Container Compliance Wall and Publish — Full Compliance

on:
  workflow_dispatch:
    inputs:
      image_name:
        description: "Container image name (without registry)"
        type: string
        default: "my-service"
      image_tag:
        description: "Image tag"
        type: string
        default: "latest"
      power_threshold:
        description: "standard | strict | paranoid"
        type: choice
        default: "standard"
        options: [ "standard", "strict", "paranoid" ]
  push:
    branches: [ "main" ]
    paths:
      - "Dockerfile"
      - ".bithub/policy/**"
      - ".github/workflows/bit-hub-container-compliance-wall-and-publish.yml"

permissions:
  contents: read
  packages: write

concurrency:
  group: bithub-container-wall-${{ github.ref }}
  cancel-in-progress: false

env:
  BIT_HUB_REPO_URL: "https://github.com/Doctor0Evil/Bit.Hub.git"
  POLICY_DIR: ".bithub/policy"
  REPORT_DIR: ".bithub/reports"
  POWER_THRESHOLD: ${{ inputs.power_threshold || vars.POWER_THRESHOLD || 'standard' }}
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/${{ inputs.image_name || 'my-service' }}
  IMAGE_TAG: ${{ inputs.image_tag || 'latest' }}
  OPA_VERSION: "0.64.1"

jobs:
  build_scan_wall_publish:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Sync canonical Bit.Hub policies (non-blocking)
        run: |
          set +e
          if git ls-remote "$BIT_HUB_REPO_URL" &>/dev/null; then
            git clone --depth=1 "$BIT_HUB_REPO_URL" /tmp/bithub
            rsync -av --ignore-existing /tmp/bithub/.bithub/policy/ .bithub/policy/
          else
            echo "::warning::Canonical repo unreachable — using local policies"
          fi
          set -e

      - name: Install OPA
        run: |
          BIN="$HOME/.local/bin"; mkdir -p "$BIN"
          curl -fsSL -o "$BIN/opa" "https://openpolicyagent.org/downloads/v${OPA_VERSION}/opa_linux_amd64_static"
          chmod +x "$BIN/opa"; echo "$BIN" >> $GITHUB_PATH

      - name: Build image with required OCI labels
        run: |
          docker build \
            --label "org.opencontainers.image.source=https://github.com/${GITHUB_REPOSITORY}" \
            --label "org.opencontainers.image.description=Bit.Hub-compliant image for ${IMAGE_NAME}" \
            --label "org.opencontainers.image.licenses=MIT" \
            -t ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} .

      - name: Save docker inspect
        run: |
          mkdir -p "${REPORT_DIR}"
          docker inspect ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG} > "${REPORT_DIR}/image-inspect.json"

      - name: Evaluate container policy (compliance.wall)
        id: wall
        run: |
          REPORT="${REPORT_DIR}/container-wall.ndjson"; : > "$REPORT"
          jq -n \
            --arg kind "container_image" \
            --arg name "${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}" \
            --slurpfile meta "${REPORT_DIR}/image-inspect.json" \
            '{kind:$kind, name:$name, metadata:$meta[0]}' > /tmp/image.json
          opa eval -f json -I -d "${POLICY_DIR}" -i /tmp/image.json 'data.bithub.container' \
            | jq -c '.result[].expressions[].value | {name: input.name, deny:(.deny // []), warn:(.warn // [])}' --argfile input /tmp/image.json \
            >> "$REPORT" || true

          DENY=$(jq '[.deny[]] | length' "$REPORT" 2>/dev/null || echo 0)
          WARN=$(jq '[.warn[]] | length' "$REPORT" 2>/dev/null || echo 0)
          echo "DENY=$DENY WARN=$WARN"
          echo "denials=$DENY" >> "$GITHUB_OUTPUT"
          echo "warnings=$WARN" >> "$GITHUB_OUTPUT"

          if [ "${POWER_THRESHOLD}" = "strict" ] && [ "$DENY" -gt 0 ]; then
            echo "::warning::Strict mode: push will be skipped due to denials."
          fi
          if [ "${POWER_THRESHOLD}" = "paranoid" ] && { [ "$DENY" -gt 0 ] || [ "$WARN" -gt 0 ]; }; then
            echo "::warning::Paranoid mode: push will be skipped due to denials/warnings."
          fi

      - name: Log in to GHCR
        if: |
          env.POWER_THRESHOLD == 'standard' ||
          (env.POWER_THRESHOLD == 'strict' && steps.wall.outputs.denials == '0') ||
          (env.POWER_THRESHOLD == 'paranoid' && steps.wall.outputs.denials == '0' && steps.wall.outputs.warnings == '0')
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Push image to GHCR
        if: |
          env.POWER_THRESHOLD == 'standard' ||
          (env.POWER_THRESHOLD == 'strict' && steps.wall.outputs.denials == '0') ||
          (env.POWER_THRESHOLD == 'paranoid' && steps.wall.outputs.denials == '0' && steps.wall.outputs.warnings == '0')
        run: docker push ${REGISTRY}/${IMAGE_NAME}:${IMAGE_TAG}

      - name: Upload wall report
        uses: actions/upload-artifact@v4
        with:
          name: bithub-container-wall
          path: .bithub/reports/container-wall.ndjson
          if-no-files-found: warn

      - name: Always succeed
        run: echo "Bit.Hub container compliance.wall completed (workflow never fails)."
