name: BitBot Learning Feedback + Compliance

on:
  workflow_dispatch:
  push:
    paths:
      - '**/*.lisp'
      - '.github/workflows/bitbot_renaming_feedback.loop.lisp.bit.yml'
  pull_request:

permissions:
  contents: read
  actions: read

jobs:
  enforce-action-policy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Enforce Bit.Hub Action Policy
        uses: rob-derosa/action-policy@v1
        with:
          policy: prohibit
          policy-url: .github/policies/bitbot_policy.json
          fail-if-violations: true
          github-token: ${{ secrets.GITHUB_TOKEN }}

  compliance-gate:
    needs: enforce-action-policy
    runs-on: ubuntu-latest
    env:
      BIT_HUB_REPO_URL: https://github.com/Doctor0Evil/Bit.Hub.git
    steps:
      - uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Setup Node.js
        uses: actions/setup-node@v3.9.1
        with:
          node-version: 18.x
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Verify Bit.Hub compliance manifests
        run: |
          if [ ! -f ".gitcomply" ]; then
            echo "::error::.gitcomply missing — cannot proceed."
            exit 1
          fi
          if [ ! -d ".bit.git.deploy" ]; then
            echo "::error::.bit.git.deploy directory missing — cannot proceed."
            exit 1
          fi
          echo "✅ Compliance manifests present."

      - name: Ensure required scripts (with hash check)
        run: |
          mkdir -p bithub/scripts
          TMP=$(mktemp -d)
          git clone --depth=1 "$BIT_HUB_REPO_URL" "$TMP"

          for script in aggregate_run_results.py update_ml_patterns.py; do
            CANONICAL="$TMP/bithub/scripts/$script"
            LOCAL="bithub/scripts/$script"

            if [ ! -f "$CANONICAL" ]; then
              echo "::error::$script not found in Bit.Hub repo — cannot bootstrap."
              continue
            fi

            if [ ! -f "$LOCAL" ]; then
              echo "⚠️ $script missing — pulling from Bit.Hub..."
              cp "$CANONICAL" "$LOCAL"
              echo "{\"ts\":\"$(date -Iseconds)\",\"event\":\"BOOTSTRAP\",\"detail\":\"$script pulled (missing)\"}" >> .bithub/ledger/compliance.log
            else
              LOCAL_HASH=$(sha256sum "$LOCAL" | cut -d' ' -f1)
              CANON_HASH=$(sha256sum "$CANONICAL" | cut -d' ' -f1)
              if [ "$LOCAL_HASH" != "$CANON_HASH" ]; then
                echo "♻️ $script outdated — refreshing from Bit.Hub..."
                cp "$CANONICAL" "$LOCAL"
                echo "{\"ts\":\"$(date -Iseconds)\",\"event\":\"BOOTSTRAP\",\"detail\":\"$script refreshed (hash mismatch)\"}" >> .bithub/ledger/compliance.log
              else
                echo "✅ $script is up-to-date."
              fi
            fi
          done

      - name: Community Policy Check
        run: conftest test --policy .github/policies .

      - name: Cache LISP build
        uses: actions/cache@v4.2.4
        with:
          path: |
            .lispbuild/
            .cache/
          key: lisp-cache-${{ runner.os }}-${{ hashFiles('**/*.lisp') }}
          restore-keys: |
            lisp-cache-${{ runner.os }}-
            lisp-cache-
          fail-on-cache-miss: true
          enableCrossOsArchive: false
          save-always: true

  build:
    needs: compliance-gate
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Build (LISP)
        run: ./build-bitbot-lisp.sh

      - name: Aggregate Run Results
        if: hashFiles('bithub/scripts/aggregate_run_results.py') != ''
        run: python bithub/scripts/aggregate_run_results.py > run_results.json

      - name: Update ML Patterns
        if: hashFiles('bithub/scripts/update_ml_patterns.py') != '' && hashFiles('run_results.json') != ''
        run: |
          python bithub/scripts/update_ml_patterns.py \
            --input run_results.json \
            --pattern-store .bithub/ml_patterns.json

      - name: Process ALNFantasia & Lisp features
        run: |
          if [ -f "bit.bot.workflows.json" ]; then
            echo "🔍 Parsing bit.bot.workflows.json for emerging concepts..."
            jq -r '.concepts[]?' bit.bot.workflows.json | while read concept; do
              echo "Processing concept: $concept"
              # Hook in ALNFantasia/Lisp/emerging concept handlers here
            done
          else
            echo "ℹ️ No bit.bot.workflows.json found."
          fi

      - name: Store Updated Patterns
        if: hashFiles('.bithub/ml_patterns.json') != ''
        run: |
          git config user.name "bitbot"
          git config user.email "bitbot@users.noreply.github.com"
          git add .bithub/ml_patterns.json
          git commit -m "Update ML patterns from latest runs" || echo "No changes"
          git push

      - name: Log to compliance ledger
        run: |
          mkdir -p .bithub/ledger
          echo "{\"ts\":\"$(date -Iseconds)\",\"event\":\"LEARNING_LOOP\",\"detail\":\"Completed with Bit.Keep-aligned bootstrap and compliance checks\"}" >> .bithub/ledger/compliance.log
