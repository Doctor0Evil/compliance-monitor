name: Bit.Hub Failover Sentinel

on:
  push:
    paths:
      - ".bit/continuity.json"
      - ".github/workflows/**"
      - ".bithub/policy/**"
  schedule:
    - cron: "*/15 * * * *"
  workflow_dispatch:
    inputs:
      power_threshold:
        description: "standard | strict | paranoid"
        type: choice
        default: "standard"
        options: [standard, strict, paranoid]

permissions:
  contents: read

concurrency:
  group: bithub-failover-sentinel-${{ github.ref }}
  cancel-in-progress: false

env:
  REPORT_DIR: ".bithub/reports"
  POLICY_DIR: ".bithub/policy"
  OPA_VERSION: "0.64.1"
  POWER_THRESHOLD: ${{ inputs.power_threshold || vars.POWER_THRESHOLD || 'standard' }}

jobs:
  sentinel:
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - uses: actions/checkout@v4

      - name: Install OPA and gh
        run: |
          BIN="$HOME/.local/bin"; mkdir -p "$BIN"
          curl -fsSL -o "$BIN/opa" "https://openpolicyagent.org/downloads/v${OPA_VERSION}/opa_linux_amd64_static"
          chmod +x "$BIN/opa"; echo "$BIN" >> $GITHUB_PATH
          sudo apt-get update -y && sudo apt-get install -y gh jq

      - name: Gather platform health
        id: health
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p "${REPORT_DIR}"
          rate=$(gh api /rate_limit --jq '.resources.core.remaining' || echo 0)
          inflight=$(gh run list --limit 200 --json status --jq '[.[]|select(.status!="completed")]|length' || echo 0)
          jq -n --argjson rate "$rate" --argjson inflight "$inflight" \
            '{github:{rate_limit:{remaining:$rate}}, queue:{inflight:$inflight}}' \
            > "${REPORT_DIR}/platform-health.json"
          cat "${REPORT_DIR}/platform-health.json"

      - name: Evaluate availability policy
        id: eval
        run: |
          jq -n --argjson continuity "$(cat .bit/continuity.json)" \
                --argjson platform "$(cat ${REPORT_DIR}/platform-health.json)" \
                '{continuity:$continuity, platform:$platform}' > /tmp/input.json
          opa eval -f json -I -d "${POLICY_DIR}" -i /tmp/input.json 'data.bithub.availability' \
            | jq -c '.result[].expressions[].value' > "${REPORT_DIR}/availability-eval.json" || true
          echo "report=${REPORT_DIR}/availability-eval.json" >> "$GITHUB_OUTPUT"
          cat "${REPORT_DIR}/availability-eval.json" || true

      - name: Decide route
        id: route
        run: |
          rate=$(jq -r '.platform.github.rate_limit.remaining' ${REPORT_DIR}/platform-health.json)
          inflight=$(jq -r '.platform.queue.inflight' ${REPORT_DIR}/platform-health.json)
          max=$(jq -r '.continuity.policies.max_concurrent_ci' .bit/continuity.json)
          route="github-actions"
          if [ "$rate" -lt 50 ] || [ "$inflight" -gt "$max" ]; then
            route="private-bit-hub"
          fi
          echo "route=$route" >> "$GITHUB_OUTPUT"
          echo "Routing to: $route"

      - name: Dispatch to private orchestrator (best-effort)
        if: steps.route.outputs.route == 'private-bit-hub'
        env:
          FAILOVER_WEBHOOK_URL: ${{ secrets.FAILOVER_WEBHOOK_URL }}
        run: |
          [ -z "$FAILOVER_WEBHOOK_URL" ] && { echo "::notice::No FAILOVER_WEBHOOK_URL set"; exit 0; }
          curl -fsS "$FAILOVER_WEBHOOK_URL" \
            -H "Content-Type: application/json" \
            -d "{\"repo\":\"${GITHUB_REPOSITORY}\",\"ref\":\"${GITHUB_REF}\",\"threshold\":\"${POWER_THRESHOLD}\"}" \
            || echo "::warning::Failover webhook did not respond"

      - name: Always succeed
        run: echo "Failover sentinel completed."

            - name: Setup .NET Core SDK
  uses: actions/setup-dotnet@v3.4.2
  with:
    # Optional SDK version(s) to use. If not provided, will install global.json version when available. Examples: 2.2.104, 3.1, 3.1.x, 3.x, 6.0.2xx
    dotnet-version: # optional
    # Optional quality of the build. The possible values are: daily, signed, validated, preview, ga.
    dotnet-quality: # optional
    # Optional global.json location, if your global.json isn't located in the root of the repo.
    global-json-file: # optional
    # Optional package source for which to set up authentication. Will consult any existing NuGet.config in the root of the repo and provide a temporary NuGet.config using the NUGET_AUTH_TOKEN environment variable as a ClearTextPassword
    source-url: # optional
    # Optional OWNER for using packages from GitHub Package Registry organizations/users other than the current repository's owner. Only used if a GPR URL is also provided in source-url
    owner: # optional
    # Optional NuGet.config location, if your NuGet.config isn't located in the root of the repo.
    config-file: # optional
    # Optional input to enable caching of the NuGet global-packages folder
    cache: # optional
    # Used to specify the path to a dependency file: packages.lock.json. Supports wildcards or a list of file names for caching multiple dependencies.
    cache-dependency-path: # optional
          
